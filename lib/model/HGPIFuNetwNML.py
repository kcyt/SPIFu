# Copyright (c) Facebook, Inc. and its affiliates. All rights reserved.

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F 
from .BasePIFuNet import BasePIFuNet
from .MLP import MLP
from .DepthNormalizer import DepthNormalizer
from .HGFilters import HGFilter


from ..net_util import init_net
from ..net_util import CustomBCELoss
from ..networks import define_G
import cv2
from math import radians


class HGPIFuNetwNML(BasePIFuNet):
    '''
    HGPIFu uses stacked hourglass as an image encoder.
    '''

    def __init__(self, 
                 opt, 
                 projection_mode='orthogonal',
                 criteria={'occ': nn.MSELoss()}
                 ):
        super(HGPIFuNetwNML, self).__init__(
            projection_mode=projection_mode,
            criteria=criteria)

        self.name = 'hg_pifu_low_res'

        self.opt = opt

        in_ch = 3

        try:
            if opt.use_front_normal: 
                in_ch += 3
            if opt.use_back_normal: 
                in_ch += 3
        except:
            pass


        if opt.use_unrolled_smpl:
            num_of_features = 0 
            if opt.use_coordinates_smpl:
                num_of_features += 3 
            if opt.use_normals_smpl:
                num_of_features += 4
                if opt.use_normals_smpl_with_rest_pose_normals:
                    num_of_features += 4
            if opt.use_blendweights_smpl:
                num_of_features += 24

            in_ch = in_ch + (num_of_features * 6) # 32 is max no. of features, and 6 is the max no. of faces
        


        self.image_filter = HGFilter(opt.num_stack_low_res, opt.hg_depth_low_res, in_ch, opt.hg_dim_low_res,   # opt.hg_depth_low_res will be the channel dimension of the final output generated by the HGFilter
                                     opt.norm, opt.hg_down, False ) 
   



        self.mlp = MLP(
            filter_channels=self.opt.mlp_dim_low_res,  
            merge_layer=self.opt.merge_layer_low_res,  
            res_layers=self.opt.mlp_res_layers_low_res,   
            norm="no_norm",
            last_op=nn.Sigmoid())



        self.spatial_enc = DepthNormalizer(opt, low_res_pifu = True)

        self.im_feat_list = []
        self.tmpx = None
        self.normx = None
        self.phi = None

        self.intermediate_preds_list = []

        init_net(self) # initialise the weights of the network (If multiple gpu(s) is to be used, then the arguments to this function can be changed)

        self.netF = None
        self.netB = None

        self.nmlF = None
        self.nmlB = None




    def filter(self, images, nmlF=None, nmlB = None, unrolled_smpl_features=None ):
        '''
        apply a fully convolutional network to images.
        the resulting feature will be stored.
        args:
            images: [B, C, H, W]
        '''


        if self.opt.use_unrolled_smpl and (unrolled_smpl_features is not None):
            self.unrolled_smpl_features = unrolled_smpl_features


        nmls = []
        with torch.no_grad():
            if self.opt.use_front_normal:
                if nmlF == None:
                    raise Exception("NORMAL MAPS ARE MISSING!!")

                self.nmlF = nmlF
                nmls.append(self.nmlF)
            if self.opt.use_back_normal:
                if nmlB == None:
                    raise Exception("NORMAL MAPS ARE MISSING!!")

                self.nmlB = nmlB
                nmls.append(self.nmlB)
        
        

        # Concatenate the input image with the two normals maps together
        if len(nmls) != 0:
            nmls = torch.cat(nmls,1)
            if images.size()[2:] != nmls.size()[2:]:
                nmls = nn.Upsample(size=images.size()[2:], mode='bilinear', align_corners=True)(nmls)
            images = torch.cat([images,nmls],1)


        if self.opt.use_unrolled_smpl and (unrolled_smpl_features is not None):
            images = torch.cat([images, unrolled_smpl_features], 1) 


        self.im_feat_list, self.normx = self.image_filter(images) # a list of [B,256,128,128] or [B, C, H, W] 

        if not self.training:
            self.im_feat_list = [self.im_feat_list[-1]]
        
    def query(self, points, calibs, transforms=None, labels=None, update_pred=True, update_phi=True ):
        '''
        given 3d points, we obtain 2d projection of these given the camera matrices.
        filter needs to be called beforehand.
        the prediction is stored to self.preds
        args:
            points: [B, 3, N] 3d points in world space
            calibs: [B, 3, 4] calibration matrices for each image. If calibs is [B,3,4], it is fine as well.
            transforms: [B, 2, 3] image space coordinate transforms
            labels: [B, C, N] ground truth labels (for supervision only)
        return:
            [B, C, N] prediction
        '''
        xyz = self.projection(points, calibs, transforms) # [B, 3, N]
        xy = xyz[:, :2, :] # [B, 2, N]




        # if the point is outside bounding box, return outside.
        in_bb = (xyz >= -1) & (xyz <= 1) # [B, 3, N]
        in_bb = in_bb[:, 0, :] & in_bb[:, 1, :] & in_bb[:, 2, :] # [B, N]
        in_bb = in_bb[:, None, :].detach().float() # [B, 1, N]

        is_zero_bool = (xyz == 0) # [B, 3, N]; remove the (0,0,0) point that has been used to discard unwanted sample pts
        is_zero_bool = is_zero_bool[:, 0, :] & is_zero_bool[:, 1, :] & is_zero_bool[:, 2, :] # [B, N]
        not_zero_bool = torch.logical_not(is_zero_bool)
        not_zero_bool = not_zero_bool[:, None, :].detach().float() # [B, 1, N]

        if labels is not None:
            self.labels = in_bb * labels # [B, 1, N]
            self.labels = not_zero_bool * self.labels

            size_of_batch = self.labels.shape[0]


        sp_feat = self.spatial_enc(xyz, calibs=calibs) # sp_feat is the normalized z value. (x and y are removed)
        


        intermediate_preds_list = []

        phi = None
        for i, im_feat in enumerate(self.im_feat_list):

            point_local_feat_list = [self.index(im_feat, xy), sp_feat] # z_feat has already gone through a round of indexing. 'point_local_feat_list' should have shape of [batch_size, 272, num_of_points]     
            point_local_feat = torch.cat(point_local_feat_list, 1)
            pred, phi = self.mlp(point_local_feat) # phi is activations from an intermediate layer of the MLP
            pred = in_bb * pred
            pred = not_zero_bool * pred

            intermediate_preds_list.append(pred)




        
        if update_phi:
            self.phi = phi

        if update_pred:
            self.intermediate_preds_list = intermediate_preds_list
            self.preds = self.intermediate_preds_list[-1]



    def get_im_feat(self):
        '''
        return the image filter in the last stack
        return:
            [B, C, H, W]
        '''
        return self.im_feat_list[-1]


    def get_error(self,points=None):
        '''
        return the loss given the ground truth labels and prediction
        '''
        error = {}
        error['Err(occ)'] = 0
        for preds in self.intermediate_preds_list:
            error['Err(occ)'] += self.criteria['occ'](preds, self.labels)
        
        error['Err(occ)'] /= len(self.intermediate_preds_list)

        return error
        

    def forward(self, images, points, calibs, labels, points_nml=None, labels_nml=None, nmlF = None, nmlB = None, unrolled_smpl_features=None ):
        self.filter(images, nmlF = nmlF, nmlB = nmlB, unrolled_smpl_features=unrolled_smpl_features)
        self.query(points, calibs, labels=labels )

        res = self.get_preds()
            
        err = self.get_error()

        return err, res








